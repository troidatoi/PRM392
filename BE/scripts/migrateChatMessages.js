const mongoose = require('mongoose');
const ChatMessage = require('../models/ChatMessage');
const User = require('../models/User'); // Import User model
require('dotenv').config();

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const migrateChatMessages = async () => {
  try {
    console.log('üöÄ Starting migration...');
    
    // L·∫•y t·∫•t c·∫£ tin nh·∫Øn ch∆∞a c√≥ roomId
    const messages = await ChatMessage.find({ roomId: { $exists: false } })
      .populate('user', '_id role');
    
    console.log(`Found ${messages.length} messages without roomId`);
    
    let updated = 0;
    
    for (const msg of messages) {
      if (msg.user) {
        // N·∫øu user l√† customer, roomId = "admin_customerId"
        // N·∫øu user l√† admin, c·∫ßn t√¨m xem tin nh·∫Øn n√†y thu·ªôc conversation n√†o
        // Gi·∫£ s·ª≠: t·∫•t c·∫£ tin nh·∫Øn ƒë·ªÅu trong format "admin_userId"
        
        let roomId;
        if (msg.user.role === 'customer') {
          roomId = `admin_${msg.user._id}`;
        } else if (msg.user.role === 'admin') {
          // Admin g·ª≠i tin - c·∫ßn x√°c ƒë·ªãnh customer t·ª´ context
          // V√¨ kh√¥ng c√≥ th√¥ng tin n√†y, ta b·ªè qua ho·∫∑c set default
          // T·ªët nh·∫•t l√† x√≥a v√† g·ª≠i l·∫°i tin nh·∫Øn m·ªõi
          console.log(`‚ö†Ô∏è  Skipping admin message ${msg._id} - cannot determine customer`);
          continue;
        }
        
        if (roomId) {
          await ChatMessage.updateOne(
            { _id: msg._id },
            { $set: { roomId: roomId } }
          );
          updated++;
          console.log(`‚úÖ Updated message ${msg._id} with roomId: ${roomId}`);
        }
      }
    }
    
    console.log(`\n‚úÖ Migration completed!`);
    console.log(`   Updated: ${updated} messages`);
    console.log(`   Skipped: ${messages.length - updated} messages`);
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üìä Database connection closed');
    process.exit(0);
  }
};

migrateChatMessages();
